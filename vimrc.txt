"带有如下符号的单词不要被换行分割"
set iskeyword+=_,$,@,%,#,-

" 设置ruler会在右下角显示光标所在的行号和列号,
" 不方便查看.改成设置状态栏显示内容
set ruler

" 设置状态行显示的内容. %F: 显示当前文件的完整路径.
" %r: 如果readonly,会显示[RO]
" %B: 显示光标下字符的编码值,十六进制.
" %l:光标所在的行号. %v:光标所在的虚拟列号.
" %P: 显示当前内容在整个文件中的百分比.
" %H和%M是strftime()函数的参数,获取时间.
" set statusline=%F%r\ [HEX=%B][%l,%v,%P]\ %{strftime(\"%H:%M\")}
 
" 显示还没有输入完整的命令.例如yy命令,输入第一个y会在右下角显示y.
set showcmd

" 使用Tab键补全时,在状态栏显示匹配的列表,
" 方便查看都有哪些命令符合补全条件.
set wildmenu

" 显示行号
set number

" 高亮显示匹配的括号
set showmatch

" 高亮显示所有搜索到的内容.后面用map映射
" 快捷键来方便关闭当前搜索的高亮
set hlsearch

" 光标立刻跳转到搜索到内容
set incsearch

"设置字体"
"set guifont=dejaVu\ Sans\ MONO\ 10
"set guifont=Courier_New:h10:cANSI

" 去掉输入错误时的提示声音
set noeb

"关闭遇到错误时的声音提示"
"关闭错误信息响铃"
set noerrorbells

" 设置文件编码,主要是避免中文乱码.
" 先注释,后续遇到中文乱码再打开
" set fileencodings=utf-8,cp936,big5,latin1

" 开启语法高亮
syntax enable

" 自动缩进时,缩进长度为4
set shiftwidth=4

" 输入Tab字符时,自动替换成空格
set expandtab

"设置所有的Tab和缩进为4个空格"
set tabstop=4

"使得按退格键时可以一次删除4个空格"
set softtabstop=4
set smarttab

"缩进，自动缩进（继承前一行的缩进）"
"set autoindent 命令打开自动缩进，是下面配置的缩写
"可使用autoindent命令的简写，即“:set ai”和“:set noai”
"还可以使用“:set ai sw=4”在一个命令中打开缩进并设置缩进级别
set ai
set cindent

"智能缩进"
set si

"自动换行”
set wrap

"设置软宽度"
set sw=4

""""""""""""""""""""""""""""""""
"""=>在shell脚本开头自动增加解释器以及作者等版权信息<="""
""""""""""""""""""""""""""""""""
"新建文件，自动插入文件头"

" 定义函数 InsertFileHeader，自动插入文件头
function! InsertFileHeader()
    let l:timestamp = strftime("%Y:%m:%d") 

    if expand("%:e") == 'c' || expand("%:e") == 'cpp' || expand("%:e") == 'go'
        " 在新建文件的第一行插入文件头信息
        call append(0,"// Author: superzhou03")
        call append(1,"// Created time: " . l:timestamp)
        call append(2,"// ")
    endif
endfunction

" 在新建文件时调用函数 InsertFileHeader
autocmd BufNewFile *.c,*.cpp,*.go call InsertFileHeader()

" 配置 gtags 插件,用于在函数之间跳转,方便查看源代码.
" 参考 gtags-cscopde.vim 的注释,添加下面语句来
" 使用 ':tag' 和 '<C-]>'
" set cscopetag
" 设置 cscopetag 后,由于gtags-cscopde默认没有启动,
" 还需要进行下面的设置.结合这两个设置, gtags 就可以
" 使用Ctrl-]键来跳转到函数定义处.
" let GtagsCscope_Auto_Load = 1
" 配置 GtagsCscope_Auto_Load = 1 后,在没有GTAGS文件
" 的目录下使用vim,会提示 Gtags-cscope: GTAGS not found.
" Press ENTER or type command to continue
" 需要按回车才会打开文件.如果要去掉这个报错,需要设置GtagsCscope_Quiet = 1
" let g:GtagsCscope_Quiet = 1
" 设置只有一个匹配结果时,不显示quickfix窗口
" let g:Gtags_Close_When_Single = 1

" 配置 quickfix 相关命令的快捷键. 可以用:map命令
" 查看vim已有的快捷键映射.
" nnoremap <F2> :cclose<CR>
" nnoremap <F3> :cn<CR>
" nnoremap <F4> :cp<CR>

" vim 用 map 命令来映射快捷键,它前面可以加一些前缀来对应
" 不同的场景.下面 map 前面的 nore 表示非递归. nore 前面
" 的n表示只在普通模式下生效.即,基于下面的配置,在插入模式下,
" 按F6没有这个映射效果.插入模式对应i. 下面配置cscope查找
" 文件命令的快捷键为F6,由于需要手动输入文件名,不要加<CR>
" nnoremap <F6> :cs find f<Space>

" 如果要去掉高亮显示搜索到的内容,需要再次搜索一些不存在的字符串,
" 比较麻烦.可以在vim的命令行中执行nohlsearch命令去掉当前高亮.
" 下面的 nohlsearch 以 : 开头表示在命令行执行.
" nnoremap <F9> :nohlsearch<CR>
" 插入模式下也用F9来去掉搜索高亮.下面的<C-o>表示CTRL-O.
" CTRL-O键可以在插入模式执行一次命令
" inoremap <F9> <C-o>:nohlsearch<CR>

